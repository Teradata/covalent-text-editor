{"version":3,"sources":["ng://@covalent/text-editor/text-editor.component.ts","ng://@covalent/text-editor/text-editor.module.ts"],"names":["noop","TdTextEditorComponent","_zone","this","_value","_fromEditor","options","propagateChange","_","onTouched","Object","defineProperty","prototype","value","_this","_easyMDE","run","writeValue","registerOnChange","fn","registerOnTouched","ngAfterViewInit","element","textarea","nativeElement","marked.setOptions","sanitize","EasyMDE","codemirror","on","isPreviewActive","isSideBySideActive","isFullscreenActive","clearAutosavedValue","toTextArea","toggleBold","toggleItalic","toggleStrikethrough","toggleHeadingSmaller","toggleHeadingBigger","toggleHeading1","toggleHeading2","toggleHeading3","toggleCodeBlock","toggleBlockquote","toggleUnorderedList","toggleOrderedList","cleanBlock","drawLink","drawImage","drawTable","drawHorizontalRule","togglePreview","toggleSideBySide","toggleFullScreen","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NgZone","ViewChild","static","Input","CovalentTextEditorModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","bootstrap"],"mappings":"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","sourcesContent":["import { Component, Input, AfterViewInit, ViewChild, ElementRef, forwardRef, NgZone } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport * as EasyMDE from 'easymde';\n// get access to the marked class under easymde\nimport * as marked from 'marked';\n\nconst noop: any = () => {\n  // empty method\n};\n\n@Component({\n  selector: 'td-text-editor',\n  templateUrl: './text-editor.component.html',\n  styleUrls: ['./text-editor.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TdTextEditorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class TdTextEditorComponent implements AfterViewInit, ControlValueAccessor {\n  private _value: string = '';\n  private _easyMDE: any;\n  private _fromEditor: boolean = false;\n\n  @ViewChild('easymde', { static: true }) textarea: ElementRef;\n  @Input() options: any = {};\n\n  constructor(private _zone: NgZone) {}\n\n  /* tslint:disable-next-line */\n  propagateChange = (_: any) => {};\n  onTouched = () => noop;\n\n  /**\n   * value?: string\n   * Value in the Editor after async getEditorContent was called\n   */\n  @Input('value')\n  set value(value: string) {\n    this._value = value;\n    if (this._easyMDE) {\n      if (!this._fromEditor) {\n        this._easyMDE.value(value);\n      }\n      this.propagateChange(this._value);\n      this._fromEditor = false;\n      this._zone.run(() => (this._value = value));\n    }\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  get easyMDE(): any {\n    return this._easyMDE;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any): void {\n    this.value = !value ? '' : value;\n  }\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  ngAfterViewInit(): void {\n    this.options.element = this.textarea.nativeElement;\n\n    // If content entered is html then don't evaluate it, prevent xss vulnerabilities\n    marked.setOptions({ sanitize: true });\n    this._easyMDE = new EasyMDE(this.options);\n    this._easyMDE.value(this.value);\n    this._easyMDE.codemirror.on('change', () => {\n      this._fromEditor = true;\n      this.writeValue(this._easyMDE.value());\n    });\n  }\n\n  /* Wrapped function provided by EasyMDE */\n\n  isPreviewActive(): boolean {\n    return this._easyMDE.isPreviewActive();\n  }\n\n  isSideBySideActive(): boolean {\n    return this._easyMDE.isSideBySideActive();\n  }\n\n  isFullscreenActive(): boolean {\n    return this._easyMDE.isFullscreenActive();\n  }\n\n  clearAutosavedValue(): void {\n    this._easyMDE.clearAutosavedValue();\n  }\n\n  toTextArea(): void {\n    this._easyMDE.toTextArea();\n  }\n\n  toggleBold(): void {\n    this._easyMDE.toggleBold();\n  }\n\n  toggleItalic(): void {\n    this._easyMDE.toggleItalic();\n  }\n\n  toggleStrikethrough(): void {\n    this._easyMDE.toggleStrikethrough();\n  }\n\n  toggleHeadingSmaller(): void {\n    this._easyMDE.toggleHeadingSmaller();\n  }\n\n  toggleHeadingBigger(): void {\n    this._easyMDE.toggleHeadingBigger();\n  }\n\n  toggleHeading1(): void {\n    this._easyMDE.toggleHeading1();\n  }\n\n  toggleHeading2(): void {\n    this._easyMDE.toggleHeading2();\n  }\n\n  toggleHeading3(): void {\n    this._easyMDE.toggleHeading3();\n  }\n\n  toggleCodeBlock(): void {\n    this._easyMDE.toggleCodeBlock();\n  }\n\n  toggleBlockquote(): void {\n    this._easyMDE.toggleBlockquote();\n  }\n\n  toggleUnorderedList(): void {\n    this._easyMDE.toggleUnorderedList();\n  }\n\n  toggleOrderedList(): void {\n    this._easyMDE.toggleOrderedList();\n  }\n\n  cleanBlock(): void {\n    this._easyMDE.cleanBlock();\n  }\n\n  drawLink(): void {\n    this._easyMDE.drawLink();\n  }\n\n  drawImage(): void {\n    this._easyMDE.drawImage();\n  }\n\n  drawTable(): void {\n    this._easyMDE.drawTable();\n  }\n\n  drawHorizontalRule(): void {\n    this._easyMDE.drawHorizontalRule();\n  }\n\n  togglePreview(): void {\n    this._easyMDE.togglePreview();\n  }\n\n  toggleSideBySide(): void {\n    this._easyMDE.toggleSideBySide();\n  }\n\n  toggleFullScreen(): void {\n    this._easyMDE.toggleFullScreen();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TdTextEditorComponent } from './text-editor.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TdTextEditorComponent],\n  exports: [TdTextEditorComponent],\n  entryComponents: [],\n  bootstrap: [TdTextEditorComponent],\n})\nexport class CovalentTextEditorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CovalentTextEditorModule,\n      providers: [],\n    };\n  }\n}\n"]}