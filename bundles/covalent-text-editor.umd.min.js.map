{"version":3,"sources":["ng://@covalent/text-editor/text-editor.component.ts","ng://@covalent/text-editor/text-editor.module.ts"],"names":["noop","TdTextEditorComponent","_zone","this","_value","_fromEditor","options","propagateChange","_","onTouched","Object","defineProperty","prototype","value","_this","_simpleMDE","run","writeValue","registerOnChange","fn","registerOnTouched","ngAfterViewInit","element","textarea","nativeElement","marked.setOptions","sanitize","SimpleMDE","codemirror","on","isPreviewActive","isSideBySideActive","isFullscreenActive","clearAutosavedValue","toTextArea","toggleBold","toggleItalic","toggleStrikethrough","toggleHeadingSmaller","toggleHeadingBigger","toggleHeading1","toggleHeading2","toggleHeading3","toggleCodeBlock","toggleBlockquote","toggleUnorderedList","toggleOrderedList","cleanBlock","drawLink","drawImage","drawTable","drawHorizontalRule","togglePreview","toggleSideBySide","toggleFullScreen","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NgZone","ViewChild","static","Input","CovalentTextEditorModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","bootstrap"],"mappings":"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","sourcesContent":["import { Component, Input, AfterViewInit, ViewChild, ElementRef, forwardRef, NgZone } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport * as SimpleMDE from 'simplemde';\n// get access to the marked class under simplemde\nimport * as marked from 'marked';\n\nconst noop: any = () => {\n  // empty method\n};\n\n@Component({\n  selector: 'td-text-editor',\n  templateUrl: './text-editor.component.html',\n  styleUrls: ['./text-editor.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TdTextEditorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class TdTextEditorComponent implements AfterViewInit, ControlValueAccessor {\n  private _value: string = '';\n  private _simpleMDE: any;\n  private _fromEditor: boolean = false;\n\n  @ViewChild('simplemde', { static: true }) textarea: ElementRef;\n  @Input() options: any = {};\n\n  constructor(private _zone: NgZone) {}\n\n  /* tslint:disable-next-line */\n  propagateChange = (_: any) => {};\n  onTouched = () => noop;\n\n  /**\n   * value?: string\n   * Value in the Editor after async getEditorContent was called\n   */\n  @Input('value')\n  set value(value: string) {\n    this._value = value;\n    if (this._simpleMDE) {\n      if (!this._fromEditor) {\n        this._simpleMDE.value(value);\n      }\n      this.propagateChange(this._value);\n      this._fromEditor = false;\n      this._zone.run(() => (this._value = value));\n    }\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  get simpleMDE(): any {\n    return this._simpleMDE;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any): void {\n    this.value = !value ? '' : value;\n  }\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  ngAfterViewInit(): void {\n    this.options.element = this.textarea.nativeElement;\n\n    // If content entered is html then don't evaluate it, prevent xss vulnerabilities\n    marked.setOptions({ sanitize: true });\n    this._simpleMDE = new SimpleMDE(this.options);\n    this._simpleMDE.value(this.value);\n    this._simpleMDE.codemirror.on('change', () => {\n      this._fromEditor = true;\n      this.writeValue(this._simpleMDE.value());\n    });\n  }\n\n  /* Wrapped function provided by SimpleMDE */\n\n  isPreviewActive(): boolean {\n    return this._simpleMDE.isPreviewActive();\n  }\n\n  isSideBySideActive(): boolean {\n    return this._simpleMDE.isSideBySideActive();\n  }\n\n  isFullscreenActive(): boolean {\n    return this._simpleMDE.isFullscreenActive();\n  }\n\n  clearAutosavedValue(): void {\n    this._simpleMDE.clearAutosavedValue();\n  }\n\n  toTextArea(): void {\n    this._simpleMDE.toTextArea();\n  }\n\n  toggleBold(): void {\n    this._simpleMDE.toggleBold();\n  }\n\n  toggleItalic(): void {\n    this._simpleMDE.toggleItalic();\n  }\n\n  toggleStrikethrough(): void {\n    this._simpleMDE.toggleStrikethrough();\n  }\n\n  toggleHeadingSmaller(): void {\n    this._simpleMDE.toggleHeadingSmaller();\n  }\n\n  toggleHeadingBigger(): void {\n    this._simpleMDE.toggleHeadingBigger();\n  }\n\n  toggleHeading1(): void {\n    this._simpleMDE.toggleHeading1();\n  }\n\n  toggleHeading2(): void {\n    this._simpleMDE.toggleHeading2();\n  }\n\n  toggleHeading3(): void {\n    this._simpleMDE.toggleHeading3();\n  }\n\n  toggleCodeBlock(): void {\n    this._simpleMDE.toggleCodeBlock();\n  }\n\n  toggleBlockquote(): void {\n    this._simpleMDE.toggleBlockquote();\n  }\n\n  toggleUnorderedList(): void {\n    this._simpleMDE.toggleUnorderedList();\n  }\n\n  toggleOrderedList(): void {\n    this._simpleMDE.toggleOrderedList();\n  }\n\n  cleanBlock(): void {\n    this._simpleMDE.cleanBlock();\n  }\n\n  drawLink(): void {\n    this._simpleMDE.drawLink();\n  }\n\n  drawImage(): void {\n    this._simpleMDE.drawImage();\n  }\n\n  drawTable(): void {\n    this._simpleMDE.drawTable();\n  }\n\n  drawHorizontalRule(): void {\n    this._simpleMDE.drawHorizontalRule();\n  }\n\n  togglePreview(): void {\n    this._simpleMDE.togglePreview();\n  }\n\n  toggleSideBySide(): void {\n    this._simpleMDE.toggleSideBySide();\n  }\n\n  toggleFullScreen(): void {\n    this._simpleMDE.toggleFullScreen();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TdTextEditorComponent } from './text-editor.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TdTextEditorComponent],\n  exports: [TdTextEditorComponent],\n  entryComponents: [],\n  bootstrap: [TdTextEditorComponent],\n})\nexport class CovalentTextEditorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CovalentTextEditorModule,\n      providers: [],\n    };\n  }\n}\n"]}