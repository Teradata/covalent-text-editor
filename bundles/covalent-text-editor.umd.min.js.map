{"version":3,"sources":["ng://@covalent/text-editor/text-editor.component.ts","ng://@covalent/text-editor/text-editor.module.ts"],"names":["noop","SimpleMDECss","require","Object","defineProperty","TdTextEditorComponent","prototype","this","_value","value","_this","_simpleMDE","_fromEditor","propagateChange","_zone","run","writeValue","registerOnChange","fn","registerOnTouched","onTouched","ngAfterViewInit","_document","styleElement","createElement","innerHTML","_domSanitizer","bypassSecurityTrustHtml","String","head","appendChild","options","element","textarea","nativeElement","marked.setOptions","sanitize","SimpleMDE","codemirror","on","isPreviewActive","isSideBySideActive","isFullscreenActive","clearAutosavedValue","toTextArea","toggleBold","toggleItalic","toggleStrikethrough","toggleHeadingSmaller","toggleHeadingBigger","toggleHeading1","toggleHeading2","toggleHeading3","toggleCodeBlock","toggleBlockquote","toggleUnorderedList","toggleOrderedList","cleanBlock","drawLink","drawImage","drawTable","drawHorizontalRule","togglePreview","toggleSideBySide","toggleFullScreen","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","NgZone","DomSanitizer","Inject","DOCUMENT","ViewChild","Input","_elementRef","_","CovalentTextEditorModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","bootstrap"],"mappings":"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","sourcesContent":["import { Component, Input, AfterViewInit, ViewChild, ElementRef, forwardRef, NgZone, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport * as SimpleMDE from 'simplemde';\n// get access to the marked class under simplemde\nimport * as marked from 'marked';\ndeclare const require: any;\n/* tslint:disable-next-line */\nlet SimpleMDECss = require('simplemde/dist/simplemde.min.css');\n\nconst noop: any = () => {\n  // empty method\n};\n\n@Component({\n  selector: 'td-text-editor',\n  templateUrl: './text-editor.component.html',\n  styleUrls: ['./text-editor.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TdTextEditorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class TdTextEditorComponent implements AfterViewInit, ControlValueAccessor {\n  private _value: string = '';\n  private _simpleMDE: any;\n  private _fromEditor: boolean = false;\n\n  @ViewChild('simplemde') textarea: ElementRef;\n  @Input() options: any = {};\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _zone: NgZone,\n    private _domSanitizer: DomSanitizer,\n    @Inject(DOCUMENT) private _document: any,\n  ) {}\n\n  /* tslint:disable-next-line */\n  propagateChange = (_: any) => {};\n  onTouched = () => noop;\n\n  /**\n   * value?: string\n   * Value in the Editor after async getEditorContent was called\n   */\n  @Input('value')\n  set value(value: string) {\n    this._value = value;\n    if (this._simpleMDE) {\n      if (!this._fromEditor) {\n        this._simpleMDE.value(value);\n      }\n      this.propagateChange(this._value);\n      this._fromEditor = false;\n      this._zone.run(() => (this._value = value));\n    }\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  get simpleMDE(): any {\n    return this._simpleMDE;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any): void {\n    this.value = !value ? '' : value;\n  }\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  ngAfterViewInit(): void {\n    if (this._document) {\n      let styleElement: HTMLElement = this._document.createElement('style');\n      styleElement.innerHTML = <string>this._domSanitizer.bypassSecurityTrustHtml(String(SimpleMDECss));\n      this._document.head.appendChild(styleElement);\n    }\n    this.options.element = this.textarea.nativeElement;\n\n    // If content entered is html then don't evaluate it, prevent xss vulnerabilities\n    marked.setOptions({ sanitize: true });\n    this._simpleMDE = new SimpleMDE(this.options);\n    this._simpleMDE.value(this.value);\n    this._simpleMDE.codemirror.on('change', () => {\n      this._fromEditor = true;\n      this.writeValue(this._simpleMDE.value());\n    });\n  }\n\n  /* Wrapped function provided by SimpleMDE */\n\n  isPreviewActive(): boolean {\n    return this._simpleMDE.isPreviewActive();\n  }\n\n  isSideBySideActive(): boolean {\n    return this._simpleMDE.isSideBySideActive();\n  }\n\n  isFullscreenActive(): boolean {\n    return this._simpleMDE.isFullscreenActive();\n  }\n\n  clearAutosavedValue(): void {\n    this._simpleMDE.clearAutosavedValue();\n  }\n\n  toTextArea(): void {\n    this._simpleMDE.toTextArea();\n  }\n\n  toggleBold(): void {\n    this._simpleMDE.toggleBold();\n  }\n\n  toggleItalic(): void {\n    this._simpleMDE.toggleItalic();\n  }\n\n  toggleStrikethrough(): void {\n    this._simpleMDE.toggleStrikethrough();\n  }\n\n  toggleHeadingSmaller(): void {\n    this._simpleMDE.toggleHeadingSmaller();\n  }\n\n  toggleHeadingBigger(): void {\n    this._simpleMDE.toggleHeadingBigger();\n  }\n\n  toggleHeading1(): void {\n    this._simpleMDE.toggleHeading1();\n  }\n\n  toggleHeading2(): void {\n    this._simpleMDE.toggleHeading2();\n  }\n\n  toggleHeading3(): void {\n    this._simpleMDE.toggleHeading3();\n  }\n\n  toggleCodeBlock(): void {\n    this._simpleMDE.toggleCodeBlock();\n  }\n\n  toggleBlockquote(): void {\n    this._simpleMDE.toggleBlockquote();\n  }\n\n  toggleUnorderedList(): void {\n    this._simpleMDE.toggleUnorderedList();\n  }\n\n  toggleOrderedList(): void {\n    this._simpleMDE.toggleOrderedList();\n  }\n\n  cleanBlock(): void {\n    this._simpleMDE.cleanBlock();\n  }\n\n  drawLink(): void {\n    this._simpleMDE.drawLink();\n  }\n\n  drawImage(): void {\n    this._simpleMDE.drawImage();\n  }\n\n  drawTable(): void {\n    this._simpleMDE.drawTable();\n  }\n\n  drawHorizontalRule(): void {\n    this._simpleMDE.drawHorizontalRule();\n  }\n\n  togglePreview(): void {\n    this._simpleMDE.togglePreview();\n  }\n\n  toggleSideBySide(): void {\n    this._simpleMDE.toggleSideBySide();\n  }\n\n  toggleFullScreen(): void {\n    this._simpleMDE.toggleFullScreen();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TdTextEditorComponent } from './text-editor.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TdTextEditorComponent],\n  exports: [TdTextEditorComponent],\n  entryComponents: [],\n  bootstrap: [TdTextEditorComponent],\n})\nexport class CovalentTextEditorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CovalentTextEditorModule,\n      providers: [],\n    };\n  }\n}\n"]}